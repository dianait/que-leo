import { test, expect } from "@playwright/test";

test.describe("Extracci칩n autom치tica de metadatos", () => {
  test.beforeEach(async ({ page }) => {
    // Navegar a la aplicaci칩n
    await page.goto("http://localhost:5173/");

    // Esperar a que la aplicaci칩n cargue
    await page.waitForSelector('button:has-text("+ Nuevo")');
  });

  test("deber칤a extraer metadatos autom치ticamente al a침adir art칤culo con URL", async ({
    page,
  }) => {
    // Interceptar la llamada al endpoint de metadatos
    await page.route("**/api/extract-metadata*", async (route) => {
      const url = route.request().url();
      const testUrl = "https://www.mozilla.org";

      if (url.includes(encodeURIComponent(testUrl))) {
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({
            success: true,
            data: {
              title: "Mozilla - Internet for people, not profit (US)",
              description: "Mozilla es una organizaci칩n sin fines de lucro",
              language: "en",
              authors: ["Mozilla Team"],
              topics: ["technology", "privacy"],
              featuredimage:
                "https://www.mozilla.org/media/img/m24/og.3a69dffad83e.png",
            },
            url: testUrl,
          }),
        });
      } else {
        await route.continue();
      }
    });

    // Interceptar la llamada a Supabase para verificar que se env칤an los metadatos
    let supabaseCallData: any = null;
    await page.route("**/rest/v1/articles2*", async (route) => {
      if (route.request().method() === "POST") {
        const postData = route.request().postData();
        if (postData) {
          supabaseCallData = JSON.parse(postData);
        }
      }
      await route.continue();
    });

    // Hacer clic en el bot칩n "Nuevo"
    await page.click('button:has-text("+ Nuevo")');

    // Esperar a que aparezca el modal
    await page.waitForSelector("form.add-article-form");

    // Ingresar URL
    await page.fill('input[type="url"]', "https://www.mozilla.org");

    // Enviar formulario
    await page.click('button:has-text("A침adir art칤culo 游닄")');

    // Esperar a que se complete la operaci칩n
    await page.waitForSelector(".success-message", { timeout: 10000 });

    // Verificar que se mostr칩 el mensaje de 칠xito
    await expect(page.locator(".success-message")).toContainText(
      "춰Art칤culo a침adido con 칠xito!"
    );

    // Verificar que se llam칩 al endpoint de metadatos
    // (esto se verifica impl칤citamente por el mock de la ruta)

    // Verificar que se enviaron los metadatos a Supabase
    expect(supabaseCallData).toBeTruthy();
    expect(supabaseCallData[0]).toMatchObject({
      title: "Mozilla - Internet for people, not profit (US)",
      url: "https://www.mozilla.org",
      language: "en",
      authors: ["Mozilla Team"],
      topics: ["technology", "privacy"],
      featured_image:
        "https://www.mozilla.org/media/img/m24/og.3a69dffad83e.png",
    });
  });

  test("deber칤a usar t칤tulo del usuario si est치 disponible", async ({
    page,
  }) => {
    // Interceptar la llamada al endpoint de metadatos
    await page.route("**/api/extract-metadata*", async (route) => {
      await route.fulfill({
        status: 200,
        contentType: "application/json",
        body: JSON.stringify({
          success: true,
          data: {
            title: "T칤tulo Extra칤do Autom치ticamente",
            description: null,
            language: "es",
            authors: ["Autor Test"],
            topics: ["tecnolog칤a"],
            featuredimage: null,
          },
          url: "https://example.com",
        }),
      });
    });

    // Interceptar la llamada a Supabase
    let supabaseCallData: any = null;
    await page.route("**/rest/v1/articles2*", async (route) => {
      if (route.request().method() === "POST") {
        const postData = route.request().postData();
        if (postData) {
          supabaseCallData = JSON.parse(postData);
        }
      }
      await route.continue();
    });

    // Hacer clic en el bot칩n "Nuevo"
    await page.click('button:has-text("+ Nuevo")');

    // Esperar a que aparezca el modal
    await page.waitForSelector("form.add-article-form");

    // Ingresar URL y t칤tulo personalizado
    await page.fill('input[type="url"]', "https://example.com");
    await page.fill(
      'input[placeholder*="Se extraer치 autom치ticamente"]',
      "Mi T칤tulo Personalizado"
    );

    // Enviar formulario
    await page.click('button:has-text("A침adir art칤culo 游닄")');

    // Esperar a que se complete la operaci칩n
    await page.waitForSelector(".success-message", { timeout: 10000 });

    // Verificar que se envi칩 el t칤tulo del usuario, no el extra칤do
    expect(supabaseCallData).toBeTruthy();
    expect(supabaseCallData[0].title).toBe("Mi T칤tulo Personalizado");
    expect(supabaseCallData[0].language).toBe("es");
    expect(supabaseCallData[0].authors).toEqual(["Autor Test"]);
  });

  test("deber칤a continuar sin metadatos si falla la extracci칩n", async ({
    page,
  }) => {
    // Interceptar la llamada al endpoint de metadatos para que falle
    await page.route("**/api/extract-metadata*", async (route) => {
      await route.fulfill({
        status: 500,
        contentType: "application/json",
        body: JSON.stringify({
          error: "Internal Server Error",
        }),
      });
    });

    // Interceptar la llamada a Supabase
    let supabaseCallData: any = null;
    await page.route("**/rest/v1/articles2*", async (route) => {
      if (route.request().method() === "POST") {
        const postData = route.request().postData();
        if (postData) {
          supabaseCallData = JSON.parse(postData);
        }
      }
      await route.continue();
    });

    // Hacer clic en el bot칩n "Nuevo"
    await page.click('button:has-text("+ Nuevo")');

    // Esperar a que aparezca el modal
    await page.waitForSelector("form.add-article-form");

    // Ingresar URL y t칤tulo
    await page.fill('input[type="url"]', "https://example.com");
    await page.fill(
      'input[placeholder*="Se extraer치 autom치ticamente"]',
      "T칤tulo de Respaldo"
    );

    // Enviar formulario
    await page.click('button:has-text("A침adir art칤culo 游닄")');

    // Esperar a que se complete la operaci칩n
    await page.waitForSelector(".success-message", { timeout: 10000 });

    // Verificar que se envi칩 el art칤culo sin metadatos
    expect(supabaseCallData).toBeTruthy();
    expect(supabaseCallData[0].title).toBe("T칤tulo de Respaldo");
    expect(supabaseCallData[0].language).toBeNull();
    expect(supabaseCallData[0].authors).toBeNull();
    expect(supabaseCallData[0].topics).toBeNull();
    expect(supabaseCallData[0].featured_image).toBeNull();
  });

  test("deber칤a agregar https:// autom치ticamente si la URL no tiene protocolo", async ({
    page,
  }) => {
    // Interceptar la llamada al endpoint de metadatos
    await page.route("**/api/extract-metadata*", async (route) => {
      const url = route.request().url();

      // Verificar que se agreg칩 https://
      expect(url).toContain(encodeURIComponent("https://example.com"));

      await route.fulfill({
        status: 200,
        contentType: "application/json",
        body: JSON.stringify({
          success: true,
          data: {
            title: "Test Article",
            description: null,
            language: "en",
            authors: [],
            topics: [],
            featuredimage: null,
          },
          url: "https://example.com",
        }),
      });
    });

    // Hacer clic en el bot칩n "Nuevo"
    await page.click('button:has-text("+ Nuevo")');

    // Esperar a que aparezca el modal
    await page.waitForSelector("form.add-article-form");

    // Ingresar URL sin protocolo
    await page.fill('input[type="url"]', "example.com");

    // Enviar formulario
    await page.click('button:has-text("A침adir art칤culo 游닄")');

    // Esperar a que se complete la operaci칩n
    await page.waitForSelector(".success-message", { timeout: 10000 });

    // Verificar que se mostr칩 el mensaje de 칠xito
    await expect(page.locator(".success-message")).toContainText(
      "춰Art칤culo a침adido con 칠xito!"
    );
  });
});
